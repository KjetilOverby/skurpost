import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import PostoppsettComponent from "~/components/postoppsett/PostoppsettComponent";
import { signIn, signOut, useSession } from "next-auth/react";
import RoleAdminMV from "~/components/roles/RoleAdminMV";
import RoleAdminVS from "~/components/roles/RoleAdminVS";

import HeaderComponent from "~/components/postoppsett/reusable/HeaderComponent";
import RoleAdmin from "~/components/roles/RoleAdmin";
import { PostInfoContext } from "~/components/context";
import { useContext, useEffect } from "react";
import LOGIN from "~/components/roles/Login";
import LoginPageNoRole from "~/components/index/LoginPageNoRole";
import StartPageRole from "~/components/index/StartPageRole";
import SaveSettingsWelcome from "~/components/index/SaveSettingsWelcome";

interface HomeProps {
  colorMode: string;
}

export default function Home({ colorMode }: HomeProps) {
  const { data: sessionData } = useSession();
  const { data: users } = api.users.getUsers.useQuery();
  const context = useContext(PostInfoContext);
  const ctx = api.useContext();

  const { setGetUserInfo } = context ?? {};

  useEffect(() => {
    if (setGetUserInfo) {
      setGetUserInfo(sessionData && sessionData.user);
    }
  }, [sessionData, setGetUserInfo]);

  const createSettings = api.settings.createPost.useMutation({
    onSuccess: () => {
      void ctx.settings.getByUser.invalidate();
    },
  });

  const {
    data: posts,
    isLoading,
    error,
  } = api.settings.getByUser.useQuery({
    userId: sessionData?.user.id ?? "",
  });

  const handleCreate = async () => {
    try {
      const theme = "darkmode";
      const sawType = "mkv";
      const fonts = "";
      const visPakking = true;
      const visMiniListe = true;
      const response = await createSettings.mutateAsync({
        theme,
        fonts,
        sawType,
        visPakking,
        visMiniListe,
      });
      console.log(response);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <Head>
        <title>Skurpost</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {sessionData && sessionData ? (
        ""
      ) : (
        <div className="grid min-h-screen items-center justify-center bg-white">
          <div>
            <button className="text-gray-500" onClick={() => signIn("google")}>
              Sign in with Google
            </button>
          </div>
        </div>
      )}
      <RoleAdminMV>
        {posts && sessionData && posts.userId === sessionData.user.id ? (
          <StartPageRole colorMode={colorMode} />
        ) : (
          <SaveSettingsWelcome handler={handleCreate} />
        )}
      </RoleAdminMV>
      <RoleAdminVS>
        {posts && posts.userId === sessionData?.user?.id ? (
          <StartPageRole colorMode={colorMode} />
        ) : (
          <SaveSettingsWelcome handler={handleCreate} />
        )}
      </RoleAdminVS>
      <LOGIN>
        <LoginPageNoRole />
      </LOGIN>
    </>
  );
}
