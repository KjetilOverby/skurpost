// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    LOGIN
    ADMIN
    MV_ADMIN
    VS_ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    organization  String?

    // role  UserRole @default(LOGIN)
    role UserRole @default(LOGIN)

    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    postningsoppsett postningsoppsett[]
    skurliste        skurliste[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model skurliste {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    creator     String
    creatorImg  String
    updater     String
    updaterImg  String
    treslag     String
    klasse      String
    klGrense    String
    klType      String
    postNr      String
    antall      Int
    m3          Int
    status      String
    post        String
    bredde      Int
    xLog        String
    prosent     String
    anm         String
    anm2        String
    VS66Blad    Float
    vs66        String
    vs66Br      String
    mkvBord     String
    mkvBordBr   String
    blad        Float
    sortering   String
    kode        String
    dimensjon   String
    torke       String
    anmerk      String
    destinasjon String
    text        String
    buffer      Boolean
    order       Int
    progress    String
    kunde       String
}

model postningsoppsett {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    updater     String
    updaterImg  String
    header      String   @unique
    blade       Float
    plankeTy    String
    prosent     String
    spes        String
    xlog        String
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    creator     String
    creatorImg  String
    deleted     Boolean
    note        String
    deleter     String
    kunde       String
    startRings  Json
    endRings    Json
    rawInput    Json
    rawDivide   Json
    sawType     String
}
